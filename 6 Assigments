Q1) why we write await keywords in JS?
ans) as we know async function are used to reload everthings and get data from function parallel thats's why we write await to specific the line to get data 
                                                  or
     await keywords is used to wait to promish to resolve . it can only used within an async block . await make code wait until the promish return a result ,allowing for cleaner and more manageable asychonus code 
                                                   or
    await operation is used to wait fr promise and get its fullfilled value . it can only used inside on synch function at top level models 

Q2) what is .json() method in JS?
ans) .json ,ethod of respond interface takes a respond stream and reads it to completion . it return promish which resolve with result of parsing in text as JSON 

Q3)What is a Microservice?
ans) it is a architectural style for devlpoing application by breaking them down into smallest independent components 
      how microservices communicates ?
    1) synchrouns communication : in synchronous communication one services make a request and wait for a response from another 
      method   common method : rest APIs : serviced expose endpoint that other services call using HTTP method eg-> /api/users  or /api/orders
    2) asynchrouns communication: in asynchrouns communication a services sends a message to anopther serivices without waiting for responce 

Q4)What is Monolith architecture?
ans) monolithic architecture is traditional software devlopers model that user a single code base to perform multiple function 

Q5)What is the difference between Monolith and Microservice?
ans)A monolithic architecture is a traditional software development model that uses one code base to perform multiple business functions. All the software components in a monolithic system are interdependent due to the data exchange mechanisms within the system. Itâ€™s restrictive and time-consuming to modify monolithic architecture as small changes impact large areas of the code base. 
In contrast, microservices are an architectural approach that composes software into small independent components or services. Each service performs a single function and communicates with other services through a well-defined interface. Because they run independently, you can update, modify, deploy, or scale each service as required.

Q6)Why do we need a useEffect Hook?
ans) react useEffect hook handle the effect of dependency array . the useeffect hook allow us to perform side effect on components . fetching data , direct update of dom and timer are some side effect .it is called evertimes any state if the dependency array is modified or update 

Q7)What is Optional Chaining?
ans) the optiaal chaining operator is JS is (?) . it allow you to access properties of nested object or array without having of check nested for null or undefined value . if an intermediate property in the chain is null or undefined , the expresion shprt circuit and return undefined 
                                                        or
     the optinal chaining operator access the object  property or call a function . if the object accesed or function called using this operator is undefined or null , the expresion short circuit and evalutes to undefined instead of throwing error 
     eg -> const adventurer = {
  name: 'Alice',
  cat: {
    name: 'Dinah',
  },
};

const dogName = adventurer.dog?.name;
console.log(dogName);
// Expected output: undefined

console.log(adventurer.someNonExistentMethod?.());
// Expected output: undefined


Q8) What is Shimmer UI?
ans) shimmer ui is visual indicator that shown when app is loading data or processing tasks in background 

Q9) What is the difference between JS expression and JS statement?
ans)JS expression : an expression is piece of code that evalute to value . it can be used wherever a value . it can be used whetever a value is epected 
     eg -> let data = 5 ; 
           console.log(data)
    JS statement : a statment perform an action and doest necessary to produce a value directly . it is compute instrucction in JS 
     eg -> (x>0) {console.log(x)}

    expression : 1)produce a value    2) can be assigned to variable 
     statement  : 1) perform an action  2) cannot directly assigned 

Q11)What is Conditional Rendering, explain with a code example?
ans) conditional rendering in react refer to process of displaying content (or components ) based on specific condition just like using if-else in JS . it allow reat components to decide what to dispalay based on application state or probs 
  eg -> return (newresturants.length===0)?(<shimmerUI/>) : (--------------)

Q12)What is CORS?
ans) CORS stands cross - origin resource sharing . it is security feature impemented in web browers to control how to resource (API , IMAGE etc) on web page can be requested from diffrent domain one page was served from 
     key concept :
    1) same-orgin policy -> by default browser enforce a "same-origin policy" meaning a web page can only access resource from same origin (protocals, domain and ports) it was loaded from 
       eg-> a page from https;/example.com cannot make requested to https;/api.otherdomain on without permisiion 
    2) CORS -> cors is mechanism that allow server to specific who origin permisiion access their resource and how (HTTPD METHOD LIKE GET) 
       eg-> this dom added specific HTTP headed in served responce 

Q13)What is async and await?
ans) async await is JS is used to simplify handling asynchonous code to appeare synchrounous they enhance code readiablity and make it easier to manage complex asynchrous flow 
     synch :
     the async function allow us to write promise(object represent the eventual completion or failure of an asynchrous operation and its resulting value) based code as if were asynchrous( allwow a host opereation without waiting for anpther operation to finish)
      this ensure that exectution thread is not blocked . async operation always return promish .if value is return that not promish JS automatically wrap and resolve promish 
    await : 
    the await ketboard is used to wait for promish to resolve .it can used within and synch block  . await make the code wait until the promish return a result . allowing for cleaner and more managelable asynchorus code 

Q14)What is the use of `const json = await data.json();` in getRestaurants()
ans) the line const json = await data.json()
    .) wait for responce body (from fetch request) to parsed into JS object 
    .) once resolved it store the parsed object it store the parsed object in json variable so you work with it furthur function such as accesing specific properties of api responce 

    Explanation->
    fetch():
    When you make a fetch request, it returns a Response object representing the entire response from the network request. This response object contains information like the status of the request, headers, and the body of the response (which is typically in raw format such as JSON, text, etc.).
    data.json():
    The json() method is a built-in function available on the Response object. It reads the raw body of the response and parses it as JSON (JavaScript Object Notation).
    This method returns a promise that resolves to a JavaScript object, which allows you to work with the response data easily in your code.
   await:
   Since json() returns a promise, you need to use the await keyword to pause the execution of your asynchronous function until the promise resolves and the data is parsed.
    await makes sure that the code waits for the promise to resolve before continuing to the next line of code.

Q15) what is the diffrent diffrent type if API calls ?
ans)  1) LOAD => API => RENDER PAGE AFTER API CALL (500ms)
      2) LOAD => RENDER (100ms) => API (300ms) =>UPDATED UI (500ms)

Q16) where the api call in place ?
ans) dont call api in return function because everytimes state change the automatically render and call api 

Q17) earlier return ?
ans) it means we put any condition before main return we reture anythings .

Q18) what is purpose of --no-inline ?
ans) in react project you add the --no-inline flag to start script it is topically used to bundler like parcel . this flag prevent the bundler from inclining assest like JS and css file directly HTML 
      eg: "start":"parcel indexx.html --no-incline"
       purpose of --no-incline : 
      1) inlining assest :by default ,parcel can inline small asest (like image , JS , CSS) directly into your HTML or inline JS and CSS . this make the initial loading og pages faster by reducing HTTPS request 
      2) with --no-incline : you add --no-incline , parcel seperated file for assest , which will then linked in HTML file . these seprate file will cached by browser independnty , potential improving performance for subsequnce visit to site 

      when use --no-incline :
      1) performance and caching : for large assests or production enviroments it often better to have file caching purpose . the way assest like JS or in wont reloaded evertimes 
      2) devloping enviroments : in devloper enviroments --no-inline may useful if you want keep your HTML clear and seprate from bundler assest for easier debuging and cahing behaviour 

Q18)Play with the useEffect Hook to see when it is called?(before or after render)
.Play with dependency array in useEffect Hook
.Play with the developer console by putting a debugger in render and useEffect
.Call an actual API to get data
.Handle Error in your API call
.Build Shimmer UI when data in not loaded
.Render your UI with actual API data
.Make Search functionality work
.Make a Login Logout button which toggles with a state
ans) 

import { useEffect, useState } from "react";
import Restruantcard from "./Restruantcard";
import { Resturantinfo } from "./config";
import ShimmerUI from "./shimmerUI";

const filter = (searchtext, allResturants) => {
  return allResturants.filter((restaurant) =>
    restaurant.info.name.toLowerCase().includes(searchtext.toLowerCase())
  ); 
};

const Body = () => {
  const [allResturants, setallResturants] = useState(Resturantinfo);
  const [searchtext, setsearchtext] = useState("");
  const [filterresturant, setfilterresturant] = useState(Resturantinfo);

  useEffect(() => {
    getresturantinfothroughapi();
  }, []);

  async function getresturantinfothroughapi() {
    const data = await fetch(
      "https://www.swiggy.com/dapi/restaurants/list/v5?lat=21.99740&lng=79.00110&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING"
    );
    const json = await data.json();
    const restaurants =
      json?.data?.cards[4]?.card?.card?.gridElements?.infoWithStyle
        ?.restaurants || [];
    setallResturants(restaurants);
    setfilterresturant(restaurants);
    console.log(json); 
  }

  if (!allResturants) return null;
  
  
  return (
    <>
      <div className="main search-container">
        <input
          className="inputplace"
          placeholder="Search restaurants"
          value={searchtext}
          onChange={(e) => setsearchtext(e.target.value)}
        />
        <button
          className="button-container"
          onClick={() => {
            const data = searchtext
              ? filter(searchtext, allResturants)
              : allResturants;
            setfilterresturant(data);
          }}
        >
          Search
        </button>
      </div>
      <div className="maibodydiv">
        {filterresturant && filterresturant.length > 0 ? (
          filterresturant.map((restaurant) => (
            <Restruantcard {...restaurant.info} key={restaurant.info.id} />
          ))
        ) : (
          <h2>No restaurants found</h2>
        )}
      </div>
    </>
  );
};

export default Body;


import { useState } from "react";
import { ImagelogoCdn } from "./config"

export let Title = (
  <a href="/">
    <img src={ImagelogoCdn}
      alt="LOGO"
      className="logo" />
  </a>
);

const Header = () => {
  const [isLoggedin, setisLoggesin] = useState(false)

  return (
    <div className="mainheader">
      {Title}
      < div className="navbaar">
        <ul>
          <li>home</li>
          <li>about</li>
          <li>contact</li>
          <li>cart</li>
        </ul>
      </div>
      {isLoggedin ? <button onClick={() => {
        setisLoggesin(false)
      }}>LOGOUT</button> :
        <button onClick={() => {
          setisLoggesin(true)
        }}>Login</button>}
    </div>
  );
};
export default Header
