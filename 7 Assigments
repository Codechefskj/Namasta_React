Q1) What are various ways to add images into our App? Explain with code examples?
ans) everytimes we add images firstly we create a new folder into source folder who's name is assests and put image into into folder 
     example : import logo from "../assestd/logo image.jpeg"

     1) Using Image File in the Public Folder : You can place your images in the public folder and reference them in your React components. code:<img src="/images/example.jpg" alt="Example" />
     2) Importing Image Files from the src Folder: You can import images directly into your components if the image is stored in the src folder. This allows for better bundling and optimization during the build process.  code:<img src={exampleImage} alt="Example" />
     3)Using Dynamic Image URLs: If you need to use an image from an external source (like a URL or an API), you can directly set the src to the image URL. code: <img src={imageUrl} alt="Example" />

Q2) What would happen if we do console.log(useState())?
ans) if you call console.log(usestate()) in react components it will print an array , where the first element is current state and second element id function that can use to update state 
     by default usestate() accept optimal initial state as arguments . if you call usestate () without arguments it will initialize the state with undefined 
     ex-> console.log(usestate())
     the first elements of array will be undefined because you did not pass any initial state value to usestate()
     the secound element of function that update state . it will be function like setstate 

     ** react says that never write usestate inside the if condition , loops , outside the functional components 

     ** usestate is hook that react give you to create local variable inside the functional components 

     ** react says that never create function inside the components 

     ** we can create more than one useeffect 

Q3) How will useEffect behave if we don't add a dependency array ?
ans) when we dont have dependency array then useeffect callback function  called after every render 
      dependency array : 
      1) nothing : callback function called every render 
      2) [] : callback function called once after 1st render 
      3) [search] : callback function called everytimes state change 

Q4) What is SPA?
ans) a web application that loads all nesesacary resource during the initial page load and dynamically update the content without refreshing the entire page 
    how it works :
   1) initial loads -> the browser loads the initial index.html along with read JS bundler 
   2) routing -> when user navigate diffrent parts of application , react update the UI dynamically without requestion to server for new HTML
   3) state managments -> react user state and props to manage and update the UI efficiently 
   4) API calls -> when data is fetched via API and react components re-render with new data 

Q5)What is difference between Client Side Routing and Server Side Routing?
ans) client side routing :
     the routing process handled internally by JS on user devices . when user click a link , the app prevent a request to server and render the page from what already saved . these means client side app works without internet connection if its already been loaded 
     client side routing good option for static page or loading page 
     the srever side routing :
     the server privide a new page to user each time a link clicked this is tradition method  handling router in web application . server side routing times have advantages like loading times improved SEO and better performed 
     on low network . however every request result in full page refresh which can efficiently 

=> generally thougth :
there are pakages name React-Router-Dom because We use React Router DOM to manage navigation in a Single Page Application (SPA) built with React 
there are two things are in react router don 1) createbrowserRoute : CreateBrowserRouter is a function in the React Router library that allows developers to configure a router that uses the HTML5 history API
coding example : 
const approuter = createBrowserRouter([
  {
    path: "/",
    element: <Layout />,
    errorElement: <Error />,
    children: [
      {
        path: "/about",
        element: <Aboutpage />,
      },
      {
        path: "/",
        element: <Body />,
      },
      {
        path: "/contact",  
        element: <Contact />,
      },
      {
        path: "/restaurants/:id",  
        element: <RestaurantMenu />,
      },
    ],
  },
]);

2)router provider : the router provider is like main hub of react router , where all routing process come together . it acts as gateway routing functiom 
  in our app . by binding our parent components have easy access to routing features and can play their part routing process 
coding example -> 
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<RouterProvider router={approuter} />);

3) error : we create a error components for error routing we put this error page into createBrowserRouter 
coding example -> errorElement: <Error />

4) there are new hooks that we used whose name is useRouteError(): this hooks gives the error type and we used this hooks for error details 
 coding example -> 
import { useRouteError } from "react-router-dom";

const Error = () => {
  const err = useRouteError();

  return (
    <>
      <div className="mainerrordiv">
        <h1>Oops!!</h1>
        <h2>Something went wrong. You can't access this page.</h2>
        <p>{err.error.
          message}</p>
      </div>
    </>

  );
};

export default Error;

5) Outlet : The Outlet component in React Router DOM is a placeholder that allows child routes to be rendered within a parent route
6) <LINK/> : link is components from react router dom . the link components is used for routing from one page to another page without loaing the page itelf it follow the single page application 
 we cannot used anchor tag because it refresh full page 
 coding exmple : 
          <Link to={"/"}><li>home</li></Link>
          <Link to={"/about"}><li>about</li></Link>
          <Link to={"/contact"}><li>contact</li></Link>

 we create to={"/"} or to={"/about"} or to={"/contect"} for createbrowserrouter 

6) here we create dynamic routing coding example : 
        path: "/restaurants/:id",  
        element: <RestaurantMenu />,

7) we used new hooks named is useparam(): it help us to gives the id which we mention in routing 
8) we call api to fetched the information about resturants  using resturants id
   then we build the resturants menu out idea is that we add <link to={"/resturant" + resturats.info.id }> to fetch the information about the restuarants 
    this is resturants information components 

    import { useEffect, useState } from "react";
    import { useParams } from "react-router-dom";
    import { Resturantimageinfo } from "./config";
    import ShimmerUI from "./shimmerUI";

    const RestaurantMenu = () => {
    const params = useParams()
    let { id } = params

    const [resturants, setresturants] = useState([]);

  useEffect((() => {
    getresturantinfo();
  }), [])

  async function getresturantinfo() {
    const data = await fetch("https://www.swiggy.com/dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=21.99740&lng=79.00110&restaurantId="+id+"&catalog_qa=undefined&submitAction=ENTER");

    const json = await data.json();
    // console.log(json.data.cards[2].card.card.info);
    setresturants(json?.data?.cards[2]?.card?.card?.info);
  }

  return (resturants?.length===0)?(<ShimmerUI/>): (

    <div className="mainresturantsmenu">
      <div className="namediv">
      <h1>{resturants.name}</h1>
      <h2>restaurantId : {params.id}</h2>
      </div>
      <div className="imagediv">
      <img src={Resturantimageinfo + resturants.cloudinaryImageId}></img>
      </div>
      <div className="bottom">
      <h3>{resturants.city}</h3>
      <h3>{resturants.locality}</h3>
      <h3>{resturants.costForTwoMessage}</h3>
      </div>
    </div>
  );
}
export default RestaurantMenu;
      },

